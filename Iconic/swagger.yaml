openapi: 3.0.0
info:
  title: Iconic Express API
  description: This API is built for mobile web and admin dashboard.
  version: 1.0.0
servers:
  - url: https://iconify-backend.vercel.app/api/v1
    description: Deploy
  - url: http://localhost:5500/api/v1
    description: Localhost
  

paths:
  /auth/create-user:
    post:
      summary: Create a new user
      tags:
        - Authentication
      description: Registers a new user in the system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: pass123456
                contactNo:
                  type: string
                  example: '+1234567890'
                role:
                  type: string
                  enum: [DEVELOPER, SUPERVISOR]
                  example: DEVELOPER
                dateOfBirth:
                  type: string
                  format: date
                  example: '1980-01-01'
                gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                maritalStatus:
                  type: string
                  enum: [Married, Unmarried]
                  example: Married
                bloodGroup:
                  type: string
                  example: O+
                address:
                  type: string
                  example: '123 Elm Street, Springfield'
                avatar:
                  type: string
                  format: uri
                  example: 'https://res.cloudinary.com/droyjiqwf/image/upload/v1696801827/download_d6s8bi.jpg'
              required:
                - name
                - email
                - password
                - role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'User Created Successfully'
                  accessToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'User Already Exist'

  /auth/login-user:
    post:
      summary: Login a user
      tags:
        - Authentication
      description: Authenticates a user and returns access and refresh tokens.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: pass123456
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'User Login Successfully'
                  accessToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'User Not Found'

  /auth/change-password:
    post:
      summary: Change user password
      tags:
        - Authentication
      description: Allows a user to change their password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: oldPassword123
                newPassword:
                  type: string
                  format: password
                  example: newPassword123
                confirmPassword:
                  type: string
                  format: password
                  example: newPassword123
              required:
                - oldPassword
                - newPassword
                - confirmPassword
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Password Change Successfully'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Password Incorrect'
  
  /user/get-user-all:
    get:
      summary: Retrieve all users
      tags:
        - User Management
      description: Fetches a list of users with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of users per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter users by name, email, contact number, or address.
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Get User All Successfully'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        contactNo:
                          type: string
                        active:
                          type: boolean
                        role:
                          type: string
                        avatar:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'
  /user/get-user-by-id/{id}:
    get:
      summary: Retrieve a user by ID
      tags:
        - User Management
      description: Fetches details of a single user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve.
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Get User Success'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      role:
                        type: string
                      contactNo:
                        type: string
                      address:
                        type: string
                      active:
                        type: boolean
                      avatar:
                        type: string
                      dateOfBirth:
                        type: string
                        format: date
                      maritalStatus:
                        type: string
                      gender:
                        type: string
                      bloodGroup:
                        type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'User Not Found'

  /user/update-user/{id}:
    put:
      summary: Update user details
      tags:
        - User Management
      description: Updates the details of a user specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123
                contactNo:
                  type: string
                  example: '+1234567890'
                role:
                  type: string
                  enum: [DEVELOPER, SUPERVISOR]
                  example: DEVELOPER
                dateOfBirth:
                  type: string
                  format: date
                  example: '1980-01-01'
                gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                maritalStatus:
                  type: string
                  enum: [Married, Unmarried]
                  example: Married
                bloodGroup:
                  type: string
                  example: O+
                address:
                  type: string
                  example: '123 Elm Street, Springfield'
                avatar:
                  type: string
                  format: uri
                  example: 'https://res.cloudinary.com/droyjiqwf/image/upload/v1696801827/download_d6s8bi.jpg'
              required:
                - name
                - email
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'User Updated Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data'

  /user/delete-user/{id}:
    delete:
      summary: Delete a user
      tags:
        - User Management
      description: Deletes a user specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to delete.
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'User Delete Success'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'User Not Found'
  
  /driver/create-driver:
    post:
      summary: Create a new driver
      tags:
        - Driver Management
      description: Registers a new driver with the provided details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: driver@example.com
                contactNo:
                  type: string
                  example: '+123456789'
                address:
                  type: string
                  example: 128/2 dhaka
                dateOfBirth:
                  type: string
                  format: date
                  example: '2000-01-01'
                gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                maritalStatus:
                  type: string
                  enum: [Married, Unmarried]
                  example: Married
                bloodGroup:
                  type: string
                  example: O+
                avatar:
                  type: string
                  format: uri
                  example: 'https://res.cloudinary.com/droyjiqwf/image/upload/v1696801827/download_d6s8bi.jpg'
              required:
                - name
                - contactNo
      responses:
        '201':
          description: Driver created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'Driver Created Successfully'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      contactNo:
                        type: string
                      address:
                        type: string
                      dateOfBirth:
                        type: string
                        format: date
                      gender:
                        type: string
                      maritalStatus:
                        type: string
                      bloodGroup:
                        type: string
                      avatar:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Driver Phone Already Exist'

  /driver/get-driver-all:
    get:
      summary: Retrieve all drivers
      tags:
        - Driver Management
      description: Fetches a list of drivers with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of drivers per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter drivers by name, email, contact number, or address.
      responses:
        '200':
          description: Successfully retrieved drivers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Get Driver All Successfully'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        contactNo:
                          type: string
                        address:
                          type: string
                        active:
                          type: boolean
                        avatar:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'

  /driver/get-driver-single/{id}:
    get:
      summary: Retrieve a driver by ID
      tags:
        - Driver Management
      description: Fetches details of a single driver by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the driver to retrieve.
      responses:
        '200':
          description: Successfully retrieved driver
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Get Driver Success'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      contactNo:
                        type: string
                      address:
                        type: string
                      active:
                        type: boolean
                      avatar:
                        type: string
                      dateOfBirth:
                        type: string
                        format: date
                      maritalStatus:
                        type: string
                      gender:
                        type: string
                      bloodGroup:
                        type: string
        '404':
          description: Driver not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Driver Not Found'

  /driver/update-driver/{id}:
    put:
      summary: Update driver details
      tags:
        - Driver Management
      description: Updates the details of a driver specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the driver to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: driver@example.com
                contactNo:
                  type: string
                  example: '+1234567890'
                address:
                  type: string
                  example: 123 Main St, Anytown, USA
                dateOfBirth:
                  type: string
                  format: date
                  example: '2000-01-01'
                gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                maritalStatus:
                  type: string
                  enum: [Married, Unmarried]
                  example: Married
                bloodGroup:
                  type: string
                  example: A+
                avatar:
                  type: string
                  format: uri
                  example: 'https://res.cloudinary.com/droyjiqwf/image/upload/v1696801827/download_d6s8bi.jpg'
              required:
                - id
      responses:
        '200':
          description: Successfully updated driver
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Driver Updated Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data'

  /driver/delete-driver/{id}:
    delete:
      summary: Delete a driver
      tags:
        - Driver Management
      description: Deletes a driver specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the driver to delete.
      responses:
        '200':
          description: Successfully deleted driver
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Driver Delete Success'
        '404':
          description: Driver not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Driver Not Found'

  /coach/create-coach:
    post:
      summary: Create a new coach
      tags:
        - Coach Management
      description: Registers a new coach with the provided details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationNo:
                  type: string
                  example: "ABC123"
                manufacturerCompany:
                  type: string
                  example: "Toyota"
                model:
                  type: string
                  example: "Model X"
                chasisNo:
                  type: string
                  example: "CH123456"
                engineNo:
                  type: string
                  example: "EN123456"
                countryOfOrigin:
                  type: string
                  example: "Japan"
                lcCode:
                  type: string
                  example: "LC001"
                deliveryToDipo:
                  type: string
                  example: "Dipo A"
                deliveryDate:
                  type: string
                  format: date
                  example: "2023-01-01"
                color:
                  type: string
                  example: "Red"
                noOfSeat:
                  type: integer
                  example: 50
                coachType:
                  type: string
                  enum: [Double_Deck, Single_Deck]
                  example: "Double_Deck"
                financedBy:
                  type: string
                  example: "Bank"
                terms:
                  type: string
                  example: "12 months"
                active:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Coach created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Coach Created Success'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      registrationNo:
                        type: string
                      manufacturerCompany:
                        type: string
                      model:
                        type: string
                      chasisNo:
                        type: string
                      engineNo:
                        type: string
                      countryOfOrigin:
                        type: string
                      lcCode:
                        type: string
                      deliveryToDipo:
                        type: string
                      deliveryDate:
                        type: string
                        format: date
                      color:
                        type: string
                      noOfSeat:
                        type: integer
                      coachType:
                        type: string
                      financedBy:
                        type: string
                      terms:
                        type: string
                      active:
                        type: boolean
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Coach Already Exists'

  /coach/get-coach-all:
    get:
      summary: Retrieve all coaches
      tags:
        - Coach Management
      description: Fetches a list of coaches with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of coaches per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter coaches by registration number.
      responses:
        '200':
          description: Successfully retrieved coaches
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'All Coach retrieved Success'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        registrationNo:
                          type: string
                        noOfSeat:
                          type: integer
                        active:
                          type: boolean
                        coachType:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'

  /coach/get-coach-single/{id}:
    get:
      summary: Retrieve a coach by ID
      tags:
        - Coach Management
      description: Fetches details of a single coach by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the coach to retrieve.
      responses:
        '200':
          description: Successfully retrieved coach
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Single Coach retrieved Success'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      registrationNo:
                        type: string
                      manufacturerCompany:
                        type: string
                      model:
                        type: string
                      chasisNo:
                        type: string
                      engineNo:
                        type: string
                      countryOfOrigin:
                        type: string
                      lcCode:
                        type: string
                      deliveryToDipo:
                        type: string
                      deliveryDate:
                        type: string
                        format: date
                      color:
                        type: string
                      noOfSeat:
                        type: integer
                      coachType:
                        type: string
                      financedBy:
                        type: string
                      terms:
                        type: string
                      active:
                        type: boolean
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Coach Not Found'

  /coach/update-coach/{id}:
    put:
      summary: Update coach details
      tags:
        - Coach Management
      description: Updates the details of a coach specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the coach to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationNo:
                  type: string
                manufacturerCompany:
                  type: string
                model:
                  type: string
                chasisNo:
                  type: string
                engineNo:
                  type: string
                countryOfOrigin:
                  type: string
                lcCode:
                  type: string
                deliveryToDipo:
                  type: string
                deliveryDate:
                  type: string
                  format: date
                color:
                  type: string
                noOfSeat:
                  type: integer
                coachType:
                  type: string
                  enum: [Double_Deck, Single_Deck]
                financedBy:
                  type: string
                terms:
                  type: string
                active:
                  type: boolean
      responses:
        '200':
          description: Successfully updated coach
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Coach Updated Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data'

  /coach/delete-coach-single/{id}:
    delete:
      summary: Delete a coach
      tags:
        - Coach Management
      description: Deletes a coach specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the coach to delete.
      responses:
        '200':
          description: Successfully deleted coach
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Coach Delete Success'
        '404':
          description: Coach not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Coach Not Found'
  
  /counter/create-counter:
    post:
      summary: Create a new counter
      tags:
        - Counter Management
      description: Registers a new counter with the provided details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [Own_Counter, Commission_Counter, Head_Office]
                  example: Own_Counter
                name:
                  type: string
                  example: "Main Counter"
                address:
                  type: string
                  example: "123 Main St"
                landMark:
                  type: string
                  example: "Near Central Park"
                locationUrl:
                  type: string
                  example: "http://maps.google.com/?q=loc"
                phone:
                  type: string
                  example: "123-456-7890"
                mobile:
                  type: string
                  example: "987-654-3210"
                fax:
                  type: string
                  example: "111-222-3333"
                email:
                  type: string
                  example: "example@domain.com"
                primaryContactPersonName:
                  type: string
                  example: "John Doe"
                country:
                  type: string
                  example: "Bangladesh"
                stationId:
                  type: integer
                  example: 1
                status:
                  type: boolean
                  example: true
                bookingAllowStatus:
                  type: string
                  enum: [Coach_Wish, Route_Wish, Total]
                  example: Coach_Wish
                bookingAllowClass:
                  type: string
                  enum: [B_Class, E_Class, Revolving, Sleeper]
                  example: B_Class
                zone:
                  type: string
                  example: "Zone A"
                isSmsSend:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Counter created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Counter Created Success'
                  data:
                    $ref: '#/components/schemas/Counter'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Mobile Number Already Exists or Station Already Exists'

  /counter/get-counter-all:
    get:
      summary: Retrieve all counters
      tags:
        - Counter Management
      description: Fetches a list of counters with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of counters per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter counters by name or primary contact person name.
      responses:
        '200':
          description: Successfully retrieved counters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'All Counter retrieved Success'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Counter'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'

  /counter/get-counter-single/{id}:
    get:
      summary: Retrieve a counter by ID
      tags:
        - Counter Management
      description: Fetches details of a single counter by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the counter to retrieve.
      responses:
        '200':
          description: Successfully retrieved counter
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Single Counter retrieved Success'
                  data:
                    $ref: '#/components/schemas/Counter'
        '404':
          description: Counter not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Counter Not Found'

  /counter/update-counter/{id}:
    put:
      summary: Update counter details
      tags:
        - Counter Management
      description: Updates the details of a counter specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the counter to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [Own_Counter, Commission_Counter, Head_Office]
                  example: Own_Counter
                name:
                  type: string
                  example: "Main Counter"
                address:
                  type: string
                  example: "123 Main St"
                landMark:
                  type: string
                  example: "Near Central Park"
                locationUrl:
                  type: string
                  example: "http://maps.google.com/?q=loc"
                phone:
                  type: string
                  example: "123-456-7890"
                mobile:
                  type: string
                  example: "987-654-3210"
                fax:
                  type: string
                  example: "111-222-3333"
                email:
                  type: string
                  example: "example@domain.com"
                primaryContactPersonName:
                  type: string
                  example: "John Doe"
                country:
                  type: string
                  example: "Bangladesh"
                stationId:
                  type: integer
                  example: 1
                status:
                  type: boolean
                  example: true
                bookingAllowStatus:
                  type: string
                  enum: [Coach_Wish, Route_Wish, Total]
                  example: Coach_Wish
                bookingAllowClass:
                  type: string
                  enum: [B_Class, E_Class, Revolving, Sleeper]
                  example: B_Class
                zone:
                  type: string
                  example: "Zone A"
                isSmsSend:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Successfully updated counter
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Counter Updated Success'
                  data:
                    $ref: '#/components/schemas/Counter'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data'

  /counter/delete-counter/{id}:
    delete:
      summary: Delete a counter
      tags:
        - Counter Management
      description: Deletes a counter specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the counter to delete.
      responses:
        '200':
          description: Successfully deleted counter
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Counter Delete Success'
        '404':
          description: Counter not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Counter Not Found'

  /station/create-station:
    post:
      summary: Create a new station
      tags:
        - Station Management
      description: Registers a new station with the provided details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Central Station"
      responses:
        '200':
          description: Station created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Station Created Success'
                  data:
                    $ref: '#/components/schemas/Station'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Station Already Exists'

  /station/get-station-all:
    get:
      summary: Retrieve all stations
      tags:
        - Station Management
      description: Fetches a list of stations with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of stations per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter stations by name.
      responses:
        '200':
          description: Successfully retrieved stations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'All Station retrieved Success'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Station'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'

  /station/get-station-single/{id}:
    get:
      summary: Retrieve a station by ID
      tags:
        - Station Management
      description: Fetches details of a single station by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the station to retrieve.
      responses:
        '200':
          description: Successfully retrieved station
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Single Station retrieved Success'
                  data:
                    $ref: '#/components/schemas/Station'
        '404':
          description: Station not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Station Not Found'

  /station/update-station/{id}:
    put:
      summary: Update station details
      tags:
        - Station Management
      description: Updates the details of a station specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the station to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Central Station Updated"
      responses:
        '200':
          description: Successfully updated station
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Station Updated Success'
                  data:
                    $ref: '#/components/schemas/Station'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data or Name Already Exists'

  /station/delete-station/{id}:
    delete:
      summary: Delete a station
      tags:
        - Station Management
      description: Deletes a station specified by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the station to delete.
      responses:
        '200':
          description: Successfully deleted station
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Station Delete Success'
        '404':
          description: Station not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Station Not Found'
  
  /route/create-route:
    post:
      summary: Create a new route
      tags:
        - Route Management
      description: Registers a new route with the provided details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                routeType:
                  type: string
                  enum: ["Local", "International"]
                  example: "Local"
                routeDirection:
                  type: string
                  enum: ["Up_Way", "Down_Way"]
                  example: "Up_Way"
                kilo:
                  type: integer
                  example: 100
                isPassengerInfoRequired:
                  type: boolean
                  example: false
                via:
                  type: string
                  example: "Station A, Station B"
                from:
                  type: integer
                  example: 1
                to:
                  type: integer
                  example: 2
                routeName:
                  type: string
                  example: "Route 101"
                viaStations:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
      responses:
        '200':
          description: Route created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Route Created Success'
                  data:
                    $ref: '#/components/schemas/Route'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data'

  /route/get-route-all:
    get:
      summary: Retrieve all routes
      tags:
        - Route Management
      description: Fetches a list of routes with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of routes per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter routes by name or via.
      responses:
        '200':
          description: Successfully retrieved routes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'All Route retrieved Success'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Route'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'

  /route/get-route-single/{id}:
    get:
      summary: Retrieve a route by ID
      tags:
        - Route Management
      description: Fetches details of a single route by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the route to retrieve.
      responses:
        '200':
          description: Successfully retrieved route
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Single Route retrieved Success'
                  data:
                    $ref: '#/components/schemas/Route'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Route Not Found'

  /route/update-route/{id}:
    put:
      summary: Update route details
      tags:
        - Route Management
      description: Updates the details of a route specified by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the route to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                routeType:
                  type: string
                  enum: ["Local", "International"]
                  example: "Local"
                routeDirection:
                  type: string
                  enum: ["Up_Way", "Down_Way"]
                  example: "Up_Way"
                kilo:
                  type: integer
                  example: 100
                isPassengerInfoRequired:
                  type: boolean
                  example: false
                via:
                  type: string
                  example: "Station A, Station B"
                from:
                  type: integer
                  example: 1
                to:
                  type: integer
                  example: 2
                routeName:
                  type: string
                  example: "Route 101"
                viaStations:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
      responses:
        '200':
          description: Successfully updated route
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Route Updated Success'
                  data:
                    $ref: '#/components/schemas/Route'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data'

  /route/delete-route-single/{id}:
    delete:
      summary: Delete a route
      tags:
        - Route Management
      description: Deletes a route specified by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the route to delete.
      responses:
        '200':
          description: Successfully deleted route
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Route Delete Success'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Route Not Found'

  /schedule/create-schedule:
    post:
      summary: Create a new schedule
      tags:
        - Schedule Management
      description: Registers a new schedule with the provided details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: string
                  example: "09:00 AM"
      responses:
        '200':
          description: Schedule created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Schedule Created Success'
                  data:
                    $ref: '#/components/schemas/Schedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Schedule Already Exists'

  /schedule/get-schedule-all:
    get:
      summary: Retrieve all schedules
      tags:
        - Schedule Management
      description: Fetches a list of schedules with optional pagination, sorting, and search filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of schedules per page.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending).
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter schedules by time.
      responses:
        '200':
          description: Successfully retrieved schedules
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'All Schedules retrieved Success'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 100
                      totalPage:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid parameters'

  /schedule/get-schedule-single/{id}:
    get:
      summary: Retrieve a schedule by ID
      tags:
        - Schedule Management
      description: Fetches details of a single schedule by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the schedule to retrieve.
      responses:
        '200':
          description: Successfully retrieved schedule
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Single Schedule retrieved Success'
                  data:
                    $ref: '#/components/schemas/Schedule'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Schedule Not Found'

  /schedule/update-schedule/{id}:
    put:
      summary: Update schedule details
      tags:
        - Schedule Management
      description: Updates the details of a schedule specified by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the schedule to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: string
                  example: "10:00 AM"
      responses:
        '200':
          description: Successfully updated schedule
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Schedule Updated Success'
                  data:
                    $ref: '#/components/schemas/Schedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid input data or Time Already Exists'

  /schedule/delete-schedule/{id}:
    delete:
      summary: Delete a schedule
      tags:
        - Schedule Management
      description: Deletes a schedule specified by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the schedule to delete.
      responses:
        '200':
          description: Successfully deleted schedule
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Schedule Delete Success'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Schedule Not Found'

components:
  schemas:
    Coach:
      type: object
      properties:
        id:
          type: integer
        registrationNo:
          type: string
        manufacturerCompany:
          type: string
        model:
          type: string
        chasisNo:
          type: string
        engineNo:
          type: string
        countryOfOrigin:
          type: string
        lcCode:
          type: string
        deliveryToDipo:
          type: string
        deliveryDate:
          type: string
          format: date
        color:
          type: string
        noOfSeat:
          type: integer
        coachType:
          type: string
          enum: [Double_Deck, Single_Deck]
        financedBy:
          type: string
        terms:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Counter:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [Own_Counter, Commission_Counter, Head_Office]
        name:
          type: string
        address:
          type: string
        landMark:
          type: string
        locationUrl:
          type: string
        phone:
          type: string
        mobile:
          type: string
        fax:
          type: string
        email:
          type: string
        primaryContactPersonName:
          type: string
        country:
          type: string
        stationId:
          type: integer
        status:
          type: boolean
        bookingAllowStatus:
          type: string
          enum: [Coach_Wish, Route_Wish, Total]
        bookingAllowClass:
          type: string
          enum: [B_Class, E_Class, Revolving, Sleeper]
        zone:
          type: string
        isSmsSend:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        station:
          $ref: '#/components/schemas/Station'
        fromCounter:
          type: array
          items:
            $ref: '#/components/schemas/CoachConfig'
        destinationCounter:
          type: array
          items:
            $ref: '#/components/schemas/CoachConfig'
        Collection:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        Order:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    Station:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        fromRoutes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        toRoutes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        viaRoute:
          type: array
          items:
            $ref: '#/components/schemas/viaRoute'

    Schedule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        time:
          type: string
          example: "09:00 AM"
        createdAt:
          type: string
          format: date-time
          example: "2024-07-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-01T00:00:00.000Z"
    Route:
      type: object
      properties:
        id:
          type: integer
          example: 1
        routeType:
          type: string
          enum: ["Local", "International"]
          example: "Local"
        routeDirection:
          type: string
          enum: ["Up_Way", "Down_Way"]
          example: "Up_Way"
        kilo:
          type: integer
          example: 100
        isPassengerInfoRequired:
          type: boolean
          example: false
        via:
          type: string
          example: "Station A, Station B"
        routeName:
          type: string
          example: "Route 101"
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 2
        fromStation:
          $ref: '#/components/schemas/Station'
        toStation:
          $ref: '#/components/schemas/Station'
        createdAt:
          type: string
          format: date-time
          example: "2024-07-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-01T00:00:00.000Z"
        viaRoute:
          type: array
          items:
            type: object
            properties:
              routeId:
                type: integer
                example: 1
              stationId:
                type: integer
                example: 2
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: 'Error message'
security:
  - bearerAuth: []
